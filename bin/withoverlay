#!/usr/bin/bash

# Idea, design and code 100% by Pierre Rioux

VERBOSE=""
test "X$1" = "X-v" && VERBOSE="yes" && shift

BASENAME=$(basename $0)
INTERNAL_LOG=${INTERNAL_LOG:-/home/.$BASENAME.log}

function usage() {
  cat <<USAGE
This is $0 1.0 by Pierre Rioux

Usage: $0 overlaypath[=overlaysize] containerimage command [args]

This program will run command (and args) from within a singularity
container with a writable overlay to capture results. Files created
while the command run will only end up in the overlay if they are not in
one of the pre-mounted singularity paths (typically: the HOME directory
and /tmp). Overlays cover the entire file system down from the root, /,
but typically the only writable place is directlry under "/home", so
programs should store persistent data in "/home/choosethis".

Options

  -v Make this program a bit more verbose. Normally the program is
     silent about all its activities and will only print whatever output
     the command produces. Note that the initial creation of the overlay
     can take some time, so it recommanded to use the verbose option
     with it. That way the user can see the progress of this phase.

Arguments:

  overlaypath
 
    The path to an overlay file; if the file doesn't exist it will
    be created, provided a suffix "=overlaysize" is provided. If the
    overlap file exists, the suffix will be ignored. The value is a
    size in gigabytes, e.g hello.img=20 means use the file 'hello.img'
    and create it with a size of 20 gigabytes if needed.

  containerimage

    The path to a singularity container image to use to run your
    command.

  command [args]

    A command or program with arguments. Note that the command will be
    passed as-is to the 'singularity exec' command, and hanlding of
    single quoted / double quoted arguments are tricky. We recommand
    wrapping any complex set of commands within a shell wrapper and
    executing that wrapper as a simple command here instead.

    Two special commands are supported:

      * getlog

        This will print a log of the activity (mostly commands)
        that were used through this program (maintained internally
        in the overlay in path $INTERNAL_LOG).

      * addlog words words words

        This will add a log message with words words words.

Examples:

# Just create a 1G overlay, don't run anything in it yet:
$0 -v ~/base.img=1  centos.img true
$0    ~/base.img=1  centos.img getlog # the '=1' will be ignored here

# Run some commands and store data in the overlay:
$0 -v ~/data.img=10 centos.img bash -c 'mkdir /home/hello;uptime >/home/hello/uptime'
$0    ~/data.img    centos.img cat /home/hello/uptime
$0    ~/data.img    centos.img addlog this is great
$0    ~/data.img    centos.img getlog

$0 hello.img=5 planet.img planet_maker --name pluto --distance 5.5h
$0 hello.img=5 planet.img moon_maker   --name charon --parent pluto

USAGE
}

# We need at least 3 arguments: overlay, container, command
if test $# -lt 3 ; then
   usage
   exit 2
fi

# Main overlay
path_and_size="$1"
overlaypath="${path_and_size%=*}"
overlaysize="${path_and_size#*=}"
shift

# Container
container="$1"
shift
if ! test -f $container ; then
  echo "Error: container '$container' doesn't seem to exist?"
  exit 2
fi

# This logs to stdout
function log() {
  test -z "$VERBOSE" && return
  echo $(date +'[%Y-%m-%d %H:%M:%S %Z]') "$@"
}

# This logs internally inside the overlay
function internal_log() {
  logline="$(date +'[%Y-%m-%d %H:%M:%S %Z]') $USER $container $@"
  singularity exec --overlay "$overlaypath" "$container" bash -c "echo '$logline' >> $INTERNAL_LOG"
}

#-----------------------------------------------
# Parse the first argument, the overlay path.
# Create it if needed.
#-----------------------------------------------
if test -e "$overlaypath" ; then
  log "Using pre-existing overlay file '$overlaypath'."
else
  if test -z "$overlaysize" ; then
    echo "Error: to create the overlay file, we need a size added at"
    echo "its end: e.g. abc.img=23 to create a 23 gigabytes file."
    exit 2
  fi

  log "Creating new overlay disk space '$overlaypath' of $overlaysize GB..."
  test "$overlaysize" -gt 30 && log "... this will take some time."
  dd_status="none"
  test -n "$VERBOSE" && dd_status="progress"
  SECONDS=0
  dd if=/dev/zero of="$overlaypath" bs=1G count=$overlaysize status=$dd_status || exit
  DD_SECONDS=$SECONDS

  log "Formating it with ext3 filesystem"
  test "$overlaysize" -gt 10 && log "... be patient, this will take some time."
  # The default number of inodes in ext3 is way to high for modern
  # large filesystems, 2M per terabyte is my rule of thumb
  num_inodes=$(( 2000 * overlaysize ))
  mkfs_quiet="-q"
  test -n "$VERBOSE" && mkfs_quiet=""
  SECONDS=0
  mkfs.ext3 $mkfs_quiet -F -N $num_inodes "$overlaypath" || exit
  MKFS_SECONDS=$SECONDS

  internal_log "Created overlay file in $DD_SECONDS seconds, mkfs in $SECONDS seconds"
fi

#---------------------------
# Special commands execution
#---------------------------
if test "$1" = "addlog" ; then
  shift
  if test $# -eq 0 ; then
    echo "Error: missing log message for 'addlog'."
    exit 2
  fi
  internal_log "$*"
  exit
fi

if test "$1" = "getlog" ; then
  shift
  if test $# -ne 0 ; then
    echo "Error: too many arguments after 'getlog'."
    exit 2
  fi
  singularity exec --overlay "$overlaypath" $container cat $INTERNAL_LOG
  exit
fi

#---------------------------
# Real command execution
#---------------------------
singularity exec --overlay "$overlaypath" $container "$@"
status=$?
internal_log "RC=$status, Command=$@"
exit $status

